package com.itheima62.mobileguard.activities;

import java.util.ArrayList;
import java.util.List;

import android.app.Activity;
import android.os.Bundle;
import android.os.Handler;
import android.os.SystemClock;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import com.itheima62.mobileguard.R;
import com.itheima62.mobileguard.dao.BlackDao;
import com.itheima62.mobileguard.domain.BlackBean;
import com.itheima62.mobileguard.domain.BlackTable;

/**
 * @author Administrator
 * 通讯卫士的数据处理,短信和电话
 */
public class TelSmsSafeActivity extends Activity {
	
	protected static final int LOADING = 1;
	protected static final int FINISH = 2;
	private ListView lv_safenumbers;
	private Button bt_addSafeNumber;
	
	
	private final int MOREDATASCOUNTS = 20;//分批加载的数据个数
	
	//存放黑名单数据的容器
	private List<BlackBean> datas = new ArrayList<BlackBean>();

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		
		initView();//初始化界面
		
		initData();//初始化数据
		
		initEvent();//初始化事件
	}
	
	/**
	 * 给每个组件设置事件
	 */
	private void initEvent() {
		//给ListView设置滑动事件
		lv_safenumbers.setOnScrollListener(new OnScrollListener() {
			
			/* (non-Javadoc)
			 * onScrollStateChanged
			 *  状态改变调用此方法
			 *  SCROLL_STATE_FLING:
			 *         惯性滑动
			 *  SCROLL_STATE_IDLE:
			 *         滑动停止
			 *  SCROLL_STATE_TOUCH_SCROLL:
			 *  	       按住滑动
			 *      三种状态，每种状态改变都会触发此方法
			 * @see android.widget.AbsListView.OnScrollListener#onScrollStateChanged(android.widget.AbsListView, int)
			 */
			@Override
			public void onScrollStateChanged(AbsListView view, int scrollState) {
				//监控静止状态SCROLL_STATE_IDLE
				// 当出现SCROLL_STATE_IDLE的状态时候，判断是否显示最后一条数据，如果显示最后一条数据，那就加载更多的数据
				if (scrollState == OnScrollListener.SCROLL_STATE_IDLE) {
					//当出现SCROLL_STATE_IDLE的状态时候
					
					//判断是否显示最后一条数据，如果显示最后一条数据，那就加载更多的数据
					//获取最后显示的数据位置
					int lastVisiblePosition = lv_safenumbers.getLastVisiblePosition();
					if (lastVisiblePosition == datas.size() - 1) {//最后显示的位置是最后一条数据
						//加载更多的数据
						initData();
					}
					
				}
			}
			
			/* (non-Javadoc)
			 * onScroll
			 * 按住滑动触发事件
			 * @see android.widget.AbsListView.OnScrollListener#onScroll(android.widget.AbsListView, int, int, int)
			 */
			@Override
			public void onScroll(AbsListView view, int firstVisibleItem,
					int visibleItemCount, int totalItemCount) {
				// TODO Auto-generated method stub
				
			}
		});
	}

	private Handler handler = new Handler(){
		public void handleMessage(android.os.Message msg) {
			switch (msg.what) {
			case LOADING://正在加载数据
				//显示加载数据的进度
				pb_loading.setVisibility(View.VISIBLE);
				
				//隐藏listview
				lv_safenumbers.setVisibility(View.GONE);

				//隐藏没有数据
				tv_nodata.setVisibility(View.GONE);
				break;
				
			case FINISH://数据加载完成
				//判断是否有数据
				//有数据
				if (moreDatas.size() != 0) {
					//显示listview
					lv_safenumbers.setVisibility(View.VISIBLE);
					
					//隐藏没有数据
					tv_nodata.setVisibility(View.GONE);
					
					//隐藏加载数据的进度
					pb_loading.setVisibility(View.GONE);
					
					//更新数据
					adapter.notifyDataSetChanged();//通知listview重新去adapter中的数据
				} else {//没有取到数据
					
					if (datas.size() != 0){//分批加载数据，没有更多数据
						Toast.makeText(getApplicationContext(), "没有更多数据", 1).show();
						return;
					}
					//没有数据
					//隐藏listview
					lv_safenumbers.setVisibility(View.GONE);
					
					//显示没有数据
					tv_nodata.setVisibility(View.VISIBLE);
					
					//隐藏加载数据的进度
					pb_loading.setVisibility(View.GONE);
				}
			break;

			default:
				break;
			}
		};
	};
	private TextView tv_nodata;
	private ProgressBar pb_loading;
	private BlackDao dao;
	private MyAdapter adapter;
	private List<BlackBean> moreDatas;//动态加载数据的临时容器

	private void initData() {
		//从db中取黑名单数据，子线程取
		new Thread(){
			

			public void run() {
				
				//取数据之前，发个消息显示正在加载数据的进度条
				handler.obtainMessage(LOADING).sendToTarget();
				
				//加载更多数据
				moreDatas = dao.getMoreDatas(MOREDATASCOUNTS, datas.size());
				
				
				datas.addAll(moreDatas);//把一个容器的所有数据加进来
				//取数据完成，发消息通知取数据完成
				handler.obtainMessage(FINISH).sendToTarget();
				
			};
		}.start();
	}

	private void initView() {
		setContentView(R.layout.activity_telsmssafe);
		//显示安全号码listview
		lv_safenumbers = (ListView) findViewById(R.id.lv_telsms_safenumbers);
	
		//添加黑名单数据的按钮
		bt_addSafeNumber = (Button) findViewById(R.id.bt_telsms_addsafenumber);
		
		//没有数据显示的文本
		tv_nodata = (TextView) findViewById(R.id.tv_telsms_nodata);
		
		//正在加载数据的进度
		pb_loading = (ProgressBar) findViewById(R.id.pb_telsms_loading);
		
		//黑名单业务对象
		dao = new BlackDao(getApplicationContext());
		//黑名单的适配器
		adapter = new MyAdapter();
		
		//给Listview设置适配器,取适配器的数据显示
         //首先 调用adapter的getCount方法来获取多少条数据，如果为0，不显示任何数据，否则调用getView方法依次取出显示位置的数据
		lv_safenumbers.setAdapter(adapter);
		
	}
	
	
	private class ItemView{
		//显示黑名单号码
		TextView tv_phone ;
		
		//显示黑名单号码拦截模式
		TextView tv_mode ;
		
		//删除黑名单数据的 按钮
		ImageView iv_delete;
	}
	/**
	 * @author Administrator
	 * 黑名单数据的适配器
	 */
	private class MyAdapter extends BaseAdapter{

		@Override
		public int getCount() {
			// TODO Auto-generated method stub
			return datas.size();
		}

		@Override
		public Object getItem(int position) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public long getItemId(int position) {
			// TODO Auto-generated method stub
			return 0;
		}
		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			// TODO Auto-generated method stub

			ItemView itemView = null;//声明组件封装对象 初始为null
			if (convertView == null) {
				convertView = View.inflate(getApplicationContext(), R.layout.item_telsmssafe_listview, null);
				
				itemView = new ItemView();
				itemView.iv_delete = (ImageView) convertView.findViewById(R.id.iv_telsmssafe_listview_item_delete);
				//显示黑名单号码
				itemView.tv_phone = (TextView) convertView.findViewById(R.id.tv_telsmssafe_listview_item_number);
				
				//显示黑名单号码拦截模式
				itemView.tv_mode = (TextView) convertView.findViewById(R.id.tv_telsmssafe_listview_item_mode);
				
				//设置标记给convertView
				convertView.setTag(itemView);
			} else {
				//存在缓存
				itemView = (ItemView) convertView.getTag();
			}
			//获取当前位置的数据
			BlackBean bean = datas.get(position);
			
			itemView.tv_phone.setText(bean.getPhone());//显示黑名单号码
			
			//设置黑名单的模式
			switch (bean.getMode()) {
			case BlackTable.SMS://短信拦截
				itemView.tv_mode.setText("短信拦截");
				break;
			case BlackTable.TEL://电话拦截
				itemView.tv_mode.setText("电话拦截");
				break;
			case BlackTable.ALL://全部拦截
				itemView.tv_mode.setText("全部拦截");
				break;

			default:
				break;
			}
			
			return convertView;
		}

		/*@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			// TODO Auto-generated method stub
			View view = View.inflate(getApplicationContext(), R.layout.item_telsmssafe_listview, null);
			
			//显示黑名单号码
			TextView tv_phone = (TextView) view.findViewById(R.id.tv_telsmssafe_listview_item_number);
			
			//显示黑名单号码拦截模式
			TextView tv_mode = (TextView) view.findViewById(R.id.tv_telsmssafe_listview_item_mode);
			
			//删除黑名单数据的 按钮
			ImageView iv_delete = (ImageView) view.findViewById(R.id.iv_telsmssafe_listview_item_delete);
			
			//初始化数据
			
			
			//获取当前位置的数据
			BlackBean bean = datas.get(position);
			
			tv_phone.setText(bean.getPhone());//显示黑名单号码
			
			//设置黑名单的模式
			switch (bean.getMode()) {
			case BlackTable.SMS://短信拦截
				tv_mode.setText("短信拦截");
				break;
			case BlackTable.TEL://电话拦截
				tv_mode.setText("电话拦截");
				break;
			case BlackTable.ALL://全部拦截
				tv_mode.setText("全部拦截");
				break;

			default:
				break;
			}
			
			return view;
		}*/
		
	}
}
